{"version":3,"sources":["web/static/vendor/js/admin/best_in_place.js"],"names":[],"mappingsfile":"priv/static/js/best_in_place.js","sourcesContent":["/*\n        BestInPlace (for jQuery)\n        version: 0.1.0 (01/01/2011)\n        @requires jQuery >= v1.4\n        @requires jQuery.purr to display pop-up windows\n\n        By Bernat Farrero based on the work of Jan Varwig.\n        Examples at http://bernatfarrero.com\n\n        Licensed under the MIT:\n          http://www.opensource.org/licenses/mit-license.php\n\n        Usage:\n\n        Attention.\n        The format of the JSON object given to the select inputs is the following:\n        [[\"key\", \"value\"],[\"key\", \"value\"]]\n        The format of the JSON object given to the checkbox inputs is the following:\n        [\"falseValue\", \"trueValue\"]\n*/\n\nfunction BestInPlaceEditor(e) {\n  this.element = e;\n  this.initOptions();\n  this.bindForm();\n  this.initNil();\n  jQuery(this.activator).bind('click', {editor: this}, this.clickHandler);\n}\n\nBestInPlaceEditor.prototype = {\n  // Public Interface Functions //////////////////////////////////////////////\n\n  activate : function() {\n    var to_display = \"\";\n    if (this.isNil) {\n      to_display = \"\";\n    }\n    else if (this.original_content) {\n      to_display = this.original_content;\n    }\n    else {\n      if (this.sanitize) {\n        to_display = this.element.text();\n      } else {\n        to_display = this.element.html();\n      }\n    }\n\n    var elem = this.isNil ? \"-\" : this.sanitize ? this.element.text() : this.element.html();\n    this.oldValue = elem;\n    this.display_value = to_display;\n    jQuery(this.activator).unbind(\"click\", this.clickHandler);\n    this.activateForm();\n    this.element.trigger(jQuery.Event(\"best_in_place:activate\"));\n  },\n\n  abort : function() {\n    if (this.isNil) this.element.text(this.nil);\n    else            this.element.text(this.oldValue);\n    jQuery(this.activator).bind('click', {editor: this}, this.clickHandler);\n    this.element.trigger(jQuery.Event(\"best_in_place:abort\"));\n    this.element.trigger(jQuery.Event(\"best_in_place:deactivate\"));\n  },\n\n  abortIfConfirm : function () {\n    if (!this.useConfirm) {\n      this.abort();\n      return;\n    }\n\n    if (confirm(\"Are you sure you want to discard your changes?\")) {\n      this.abort();\n    }\n  },\n\n  update : function() {\n    var editor = this;\n    if (this.formType in {\"input\":1, \"textarea\":1} && this.getValue() == this.oldValue)\n    { // Avoid request if no change is made\n      this.abort();\n      return true;\n    }\n    this.isNil = false;\n    editor.ajax({\n      \"type\"       : \"post\",\n      \"dataType\"   : \"text\",\n      \"data\"       : editor.requestData(),\n      \"success\"    : function(data){ editor.loadSuccessCallback(data); },\n      \"error\"      : function(request, error){ editor.loadErrorCallback(request, error); }\n    });\n    if (this.formType == \"select\") {\n      var value = this.getValue();\n      this.previousCollectionValue = value;\n\n      jQuery.each(this.values, function(i, v) {\n        if (value == v[0]) {\n          editor.element.html(v[1]);\n        }\n      }\n    );\n    } else if (this.formType == \"checkbox\") {\n      editor.element.html(this.getValue() ? this.values[1] : this.values[0]);\n    } else {\n      editor.element.text(this.getValue() !== \"\" ? this.getValue() : this.nil);\n    }\n    editor.element.trigger(jQuery.Event(\"best_in_place:update\"));\n  },\n\n  activateForm : function() {\n    alert(\"The form was not properly initialized. activateForm is unbound\");\n  },\n\n  // Helper Functions ////////////////////////////////////////////////////////\n\n  initOptions : function() {\n    // Try parent supplied info\n    var self = this;\n    self.element.parents().each(function(){\n      $parent = jQuery(this);\n      self.url           = self.url           || $parent.attr(\"data-url\");\n      self.collection    = self.collection    || $parent.attr(\"data-collection\");\n      self.formType      = self.formType      || $parent.attr(\"data-type\");\n      self.objectName    = self.objectName    || $parent.attr(\"data-object\");\n      self.attributeName = self.attributeName || $parent.attr(\"data-attribute\");\n      self.activator     = self.activator     || $parent.attr(\"data-activator\");\n      self.okButton      = self.okButton      || $parent.attr(\"data-ok-button\");\n      self.cancelButton  = self.cancelButton  || $parent.attr(\"data-cancel-button\");\n      self.nil           = self.nil           || $parent.attr(\"data-nil\");\n      self.inner_class   = self.inner_class   || $parent.attr(\"data-inner-class\");\n      self.html_attrs    = self.html_attrs    || $parent.attr(\"data-html-attrs\");\n      self.original_content    = self.original_content    || $parent.attr(\"data-original-content\");\n      self.collectionValue = self.collectionValue || $parent.attr(\"data-value\");\n    });\n\n    // Try Rails-id based if parents did not explicitly supply something\n    self.element.parents().each(function(){\n      var res = this.id.match(/^(\\w+)_(\\d+)$/i);\n      if (res) {\n        self.objectName = self.objectName || res[1];\n      }\n    });\n\n    // Load own attributes (overrides all others)\n    self.url           = self.element.attr(\"data-url\")           || self.url      || document.location.pathname;\n    self.collection    = self.element.attr(\"data-collection\")    || self.collection;\n    self.formType      = self.element.attr(\"data-type\")          || self.formtype || \"input\";\n    self.objectName    = self.element.attr(\"data-object\")        || self.objectName;\n    self.attributeName = self.element.attr(\"data-attribute\")     || self.attributeName;\n    self.activator     = self.element.attr(\"data-activator\")     || self.element;\n    self.okButton      = self.element.attr(\"data-ok-button\")     || self.okButton;\n    self.cancelButton  = self.element.attr(\"data-cancel-button\") || self.cancelButton;\n    self.nil           = self.element.attr(\"data-nil\")           || self.nil      || \"-\";\n    self.inner_class   = self.element.attr(\"data-inner-class\")   || self.inner_class   || null;\n    self.html_attrs    = self.element.attr(\"data-html-attrs\")    || self.html_attrs;\n    self.original_content    = self.element.attr(\"data-original-content\") || self.original_content;\n    self.collectionValue     = self.element.attr(\"data-value\")            || self.collectionValue;\n\n    if (!self.element.attr(\"data-sanitize\")) {\n      self.sanitize = true;\n    }\n    else {\n      self.sanitize = (self.element.attr(\"data-sanitize\") == \"true\");\n    }\n\n    if (!self.element.attr(\"data-use-confirm\")) {\n      self.useConfirm = true;\n    } else {\n      self.useConfirm = (self.element.attr(\"data-use-confirm\") != \"false\");\n    }\n\n    if ((self.formType == \"select\" || self.formType == \"checkbox\") && self.collection !== null)\n    {\n      self.values = jQuery.parseJSON(self.collection);\n    }\n\n  },\n\n  bindForm : function() {\n    this.activateForm = BestInPlaceEditor.forms[this.formType].activateForm;\n    this.getValue     = BestInPlaceEditor.forms[this.formType].getValue;\n  },\n\n  initNil: function() {\n    if (this.element.text() === \"\")\n    {\n      this.isNil = true;\n      this.element.text(this.nil);\n    }\n  },\n\n  getValue : function() {\n    alert(\"The form was not properly initialized. getValue is unbound\");\n  },\n\n  // Trim and Strips HTML from text\n  sanitizeValue : function(s) {\n   return jQuery.trim(s);\n  },\n\n  /* Generate the data sent in the POST request */\n  requestData : function() {\n    // To prevent xss attacks, a csrf token must be defined as a meta attribute\n    csrf_token = jQuery('meta[name=csrf-token]').attr('content');\n    csrf_param = jQuery('meta[name=csrf-param]').attr('content');\n\n    var data = \"_method=put\";\n    data += \"&\" + this.objectName + '[' + this.attributeName + ']=' + encodeURIComponent(this.getValue());\n\n    if (csrf_param !== undefined && csrf_token !== undefined) {\n      data += \"&\" + csrf_param + \"=\" + encodeURIComponent(csrf_token);\n    }\n    return data;\n  },\n\n  ajax : function(options) {\n    options.url = this.url;\n    options.beforeSend = function(xhr){ xhr.setRequestHeader(\"Accept\", \"application/json\"); };\n    return jQuery.ajax(options);\n  },\n\n  // Handlers ////////////////////////////////////////////////////////////////\n\n  loadSuccessCallback : function(data) {\n    try {\n      var response = jQuery.parseJSON(jQuery.trim(data));\n      if (response !== null && response.hasOwnProperty(\"display_as\")) {\n        this.element.attr(\"data-original-content\", this.element.text());\n        this.original_content = this.element.text();\n        this.element.text(response[\"display_as\"]);\n      }\n      this.element.trigger(jQuery.Event(\"ajax:success\"), data);\n\n      // Binding back after being clicked\n      jQuery(this.activator).bind('click', {editor: this}, this.clickHandler);\n      this.element.trigger(jQuery.Event(\"best_in_place:deactivate\"));\n\n      if (this.collectionValue !== null) {\n        this.collectionValue = this.previousCollectionValue;\n        this.previousCollectionValue = null;\n      }\n    }\n    catch(err) {}\n  },\n\n  loadErrorCallback : function(request, error) {\n    this.element.text(this.oldValue);\n\n    this.element.trigger(jQuery.Event(\"best_in_place:error\"), [request, error])\n    this.element.trigger(jQuery.Event(\"ajax:error\"));\n\n    // Binding back after being clicked\n    jQuery(this.activator).bind('click', {editor: this}, this.clickHandler);\n    this.element.trigger(jQuery.Event(\"best_in_place:deactivate\"));\n  },\n\n  clickHandler : function(event) {\n    event.preventDefault();\n    event.data.editor.activate();\n  },\n\n  setHtmlAttributes : function() {\n    var formField = this.element.find(this.formType);\n\n    try {\n      var attrs = jQuery.parseJSON(this.html_attrs);\n      for(var key in attrs){\n        formField.attr(key, attrs[key]);\n      }\n    }\n    catch(err) {}\n\n  }\n};\n\n\n// Button cases:\n// If no buttons, then blur saves, ESC cancels\n// If just Cancel button, then blur saves, ESC or clicking Cancel cancels (careful of blur event!)\n// If just OK button, then clicking OK saves (careful of blur event!), ESC or blur cancels\n// If both buttons, then clicking OK saves, ESC or clicking Cancel or blur cancels\nBestInPlaceEditor.forms = {\n  \"input\" : {\n    activateForm : function() {\n      var output = jQuery(document.createElement('form'))\n                   .addClass('form_in_place')\n                   .attr('action', 'javascript:void(0);')\n                   .attr('style', 'display:inline');\n      var input_elt = jQuery(document.createElement('input'))\n                      .attr('type', 'text')\n                      .attr('name', this.attributeName)\n                      .val(this.display_value);\n      if(this.inner_class !== null) {\n        input_elt.addClass(this.inner_class);\n      }\n      output.append(input_elt);\n      if(this.okButton) {\n        output.append(\n          jQuery(document.createElement('input'))\n          .attr('type', 'submit')\n          .attr('value', this.okButton)\n        )\n      }\n      if(this.cancelButton) {\n        output.append(\n          jQuery(document.createElement('input'))\n          .attr('type', 'button')\n          .attr('value', this.cancelButton)\n        )\n      }\n\n      this.element.html(output);\n      this.setHtmlAttributes();\n      this.element.find(\"input[type='text']\")[0].select();\n      this.element.find(\"form\").bind('submit', {editor: this}, BestInPlaceEditor.forms.input.submitHandler);\n      if (this.cancelButton) {\n        this.element.find(\"input[type='button']\").bind('click', {editor: this}, BestInPlaceEditor.forms.input.cancelButtonHandler);\n      }\n      this.element.find(\"input[type='text']\").bind('blur', {editor: this}, BestInPlaceEditor.forms.input.inputBlurHandler);\n      this.element.find(\"input[type='text']\").bind('keyup', {editor: this}, BestInPlaceEditor.forms.input.keyupHandler);\n      this.blurTimer = null;\n      this.userClicked = false;\n    },\n\n    getValue : function() {\n      return this.sanitizeValue(this.element.find(\"input\").val());\n    },\n\n    // When buttons are present, use a timer on the blur event to give precedence to clicks\n    inputBlurHandler : function(event) {\n      if (event.data.editor.okButton) {\n        event.data.editor.blurTimer = setTimeout(function () {\n          if (!event.data.editor.userClicked) {\n            event.data.editor.abort();\n          }\n        }, 500);\n      } else {\n        if (event.data.editor.cancelButton) {\n          event.data.editor.blurTimer = setTimeout(function () {\n            if (!event.data.editor.userClicked) {\n              event.data.editor.update();\n            }\n          }, 500);\n        } else {\n          event.data.editor.update();\n        }\n      }\n    },\n\n    submitHandler : function(event) {\n      event.data.editor.userClicked = true;\n      clearTimeout(event.data.editor.blurTimer);\n      event.data.editor.update();\n    },\n\n    cancelButtonHandler : function(event) {\n      event.data.editor.userClicked = true;\n      clearTimeout(event.data.editor.blurTimer);\n      event.data.editor.abort();\n      event.stopPropagation(); // Without this, click isn't handled\n    },\n\n    keyupHandler : function(event) {\n      if (event.keyCode == 27) {\n        event.data.editor.abort();\n      }\n    }\n  },\n\n  \"date\" : {\n    activateForm : function() {\n      var that      = this,\n          output    = jQuery(document.createElement('form'))\n                      .addClass('form_in_place')\n                      .attr('action', 'javascript:void(0);')\n                      .attr('style', 'display:inline'),\n          input_elt = jQuery(document.createElement('input'))\n                      .attr('type', 'text')\n                      .attr('name', this.attributeName)\n                      .attr('value', this.sanitizeValue(this.display_value));\n      if(this.inner_class !== null) {\n        input_elt.addClass(this.inner_class);\n      }\n      output.append(input_elt)\n\n      this.element.html(output);\n      this.setHtmlAttributes();\n      this.element.find('input')[0].select();\n      this.element.find(\"form\").bind('submit', {editor: this}, BestInPlaceEditor.forms.input.submitHandler);\n      this.element.find(\"input\").bind('keyup', {editor: this}, BestInPlaceEditor.forms.input.keyupHandler);\n\n      this.element.find('input')\n        .datepicker({\n            onClose: function() {\n              that.update();\n            }\n          })\n        .datepicker('show');\n    },\n\n    getValue :  function() {\n      return this.sanitizeValue(this.element.find(\"input\").val());\n    },\n\n    submitHandler : function(event) {\n      event.data.editor.update();\n    },\n\n    keyupHandler : function(event) {\n      if (event.keyCode == 27) {\n        event.data.editor.abort();\n      }\n    }\n  },\n\n  \"select\" : {\n    activateForm : function() {\n      var output     = jQuery(document.createElement('form'))\n                       .attr('action', 'javascript:void(0)')\n                       .attr('style', 'display:inline');\n          selected   = '',\n          oldValue   = this.oldValue,\n          select_elt = jQuery(document.createElement('select')),\n          currentCollectionValue = this.collectionValue;\n\n      jQuery.each(this.values, function (index, value) {\n        var option_elt = jQuery(document.createElement('option'))\n                         // .attr('value', value[0])\n                         .val(value[0])\n                         .html(value[1]);\n        if(value[0] == currentCollectionValue) {\n          option_elt.attr('selected', 'selected');\n        }\n        select_elt.append(option_elt);\n      });\n      output.append(select_elt);\n\n      this.element.html(output);\n      this.setHtmlAttributes();\n      this.element.find(\"select\").bind('change', {editor: this}, BestInPlaceEditor.forms.select.blurHandler);\n      this.element.find(\"select\").bind('blur', {editor: this}, BestInPlaceEditor.forms.select.blurHandler);\n      this.element.find(\"select\").bind('keyup', {editor: this}, BestInPlaceEditor.forms.select.keyupHandler);\n      this.element.find(\"select\")[0].focus();\n    },\n\n    getValue : function() {\n      return this.sanitizeValue(this.element.find(\"select\").val());\n      // return this.element.find(\"select\").val();\n    },\n\n    blurHandler : function(event) {\n      event.data.editor.update();\n    },\n\n    keyupHandler : function(event) {\n      if (event.keyCode == 27) event.data.editor.abort();\n    }\n  },\n\n  \"checkbox\" : {\n    activateForm : function() {\n      var newValue = Boolean(this.oldValue.toLowerCase() != this.values[1].toLowerCase());\n      var output = newValue ? this.values[1] : this.values[0];\n      this.element.html(output);\n      this.setHtmlAttributes();\n      this.update();\n    },\n\n    getValue : function() {\n      return Boolean(this.element.html().toLowerCase() == this.values[1].toLowerCase());\n    }\n  },\n\n  \"textarea\" : {\n    activateForm : function() {\n      // grab width and height of text\n      width = this.element.css('width');\n      height = this.element.css('height');\n\n      // construct form\n      var output   = jQuery(document.createElement('form'))\n                     .attr('action', 'javascript:void(0)')\n                     .attr('style', 'display:inline')\n                     .append(jQuery(document.createElement('textarea'))\n                             .val(this.sanitizeValue(this.display_value)));\n      if(this.okButton) {\n        output.append(\n          jQuery(document.createElement('input'))\n          .attr('type', 'submit')\n          .attr('value', this.okButton)\n        );\n      }\n      if(this.cancelButton) {\n        output.append(\n          jQuery(document.createElement('input'))\n          .attr('type', 'button')\n          .attr('value', this.cancelButton)\n        )\n      }\n\n      this.element.html(output);\n      this.setHtmlAttributes();\n\n      // set width and height of textarea\n      jQuery(this.element.find(\"textarea\")[0]).css({ 'min-width': width, 'min-height': height });\n      jQuery(this.element.find(\"textarea\")[0]).elastic();\n\n      this.element.find(\"textarea\")[0].focus();\n      this.element.find(\"form\").bind('submit', {editor: this}, BestInPlaceEditor.forms.textarea.submitHandler);\n      if (this.cancelButton) {\n        this.element.find(\"input[type='button']\").bind('click', {editor: this}, BestInPlaceEditor.forms.textarea.cancelButtonHandler);\n      }\n      this.element.find(\"textarea\").bind('blur', {editor: this}, BestInPlaceEditor.forms.textarea.blurHandler);\n      this.element.find(\"textarea\").bind('keyup', {editor: this}, BestInPlaceEditor.forms.textarea.keyupHandler);\n      this.blurTimer = null;\n      this.userClicked = false;\n    },\n\n    getValue :  function() {\n      return this.sanitizeValue(this.element.find(\"textarea\").val());\n    },\n\n    // When buttons are present, use a timer on the blur event to give precedence to clicks\n    blurHandler : function(event) {\n      if (event.data.editor.okButton) {\n        event.data.editor.blurTimer = setTimeout(function () {\n          if (!event.data.editor.userClicked) {\n            event.data.editor.abortIfConfirm();\n          }\n        }, 500);\n      } else {\n        if (event.data.editor.cancelButton) {\n          event.data.editor.blurTimer = setTimeout(function () {\n            if (!event.data.editor.userClicked) {\n              event.data.editor.update();\n            }\n          }, 500);\n        } else {\n          event.data.editor.update();\n        }\n      }\n    },\n\n    submitHandler : function(event) {\n      event.data.editor.userClicked = true;\n      clearTimeout(event.data.editor.blurTimer);\n      event.data.editor.update();\n    },\n\n    cancelButtonHandler : function(event) {\n      event.data.editor.userClicked = true;\n      clearTimeout(event.data.editor.blurTimer);\n      event.data.editor.abortIfConfirm();\n      event.stopPropagation(); // Without this, click isn't handled\n    },\n\n    keyupHandler : function(event) {\n      if (event.keyCode == 27) {\n        event.data.editor.abortIfConfirm();\n      }\n    }\n  }\n};\n\njQuery.fn.best_in_place = function() {\n\n  function setBestInPlace(element) {\n    if (!element.data('bestInPlaceEditor')) {\n      element.data('bestInPlaceEditor', new BestInPlaceEditor(element));\n      return true;\n    }\n  }\n\n  jQuery(this.context).delegate(this.selector, 'click', function () {\n    var el = jQuery(this);\n    if (setBestInPlace(el))\n      el.click();\n  });\n\n  this.each(function () {\n    setBestInPlace(jQuery(this));\n  });\n\n  return this;\n};\n\n\n\n/**\n* @name             Elastic\n* @descripton           Elastic is Jquery plugin that grow and shrink your textareas automaticliy\n* @version            1.6.5\n* @requires           Jquery 1.2.6+\n*\n* @author             Jan Jarfalk\n* @author-email         jan.jarfalk@unwrongest.com\n* @author-website         http://www.unwrongest.com\n*\n* @licens             MIT License - http://www.opensource.org/licenses/mit-license.php\n*/\n\n(function(jQuery){\n  jQuery.fn.extend({\n    elastic: function() {\n      //  We will create a div clone of the textarea\n      //  by copying these attributes from the textarea to the div.\n      var mimics = [\n        'paddingTop',\n        'paddingRight',\n        'paddingBottom',\n        'paddingLeft',\n        'fontSize',\n        'lineHeight',\n        'fontFamily',\n        'width',\n        'fontWeight'];\n\n      return this.each( function() {\n\n        // Elastic only works on textareas\n        if ( this.type != 'textarea' ) {\n          return false;\n        }\n\n        var $textarea = jQuery(this),\n          $twin   = jQuery('<div />').css({'position': 'absolute','display':'none','word-wrap':'break-word'}),\n          lineHeight  = parseInt($textarea.css('line-height'),10) || parseInt($textarea.css('font-size'),'10'),\n          minheight = parseInt($textarea.css('height'),10) || lineHeight*3,\n          maxheight = parseInt($textarea.css('max-height'),10) || Number.MAX_VALUE,\n          goalheight  = 0,\n          i       = 0;\n\n        // Opera returns max-height of -1 if not set\n        if (maxheight < 0) { maxheight = Number.MAX_VALUE; }\n\n        // Append the twin to the DOM\n        // We are going to meassure the height of this, not the textarea.\n        $twin.appendTo($textarea.parent());\n\n        // Copy the essential styles (mimics) from the textarea to the twin\n        i = mimics.length;\n        while(i--){\n          $twin.css(mimics[i].toString(),$textarea.css(mimics[i].toString()));\n        }\n\n\n        // Sets a given height and overflow state on the textarea\n        function setHeightAndOverflow(height, overflow){\n          curratedHeight = Math.floor(parseInt(height,10));\n          if($textarea.height() != curratedHeight){\n            $textarea.css({'height': curratedHeight + 'px','overflow':overflow});\n\n          }\n        }\n\n\n        // This function will update the height of the textarea if necessary\n        function update() {\n\n          // Get curated content from the textarea.\n          var textareaContent = $textarea.val().replace(/&/g,'&amp;').replace(/  /g, '&nbsp;').replace(/<|>/g, '&gt;').replace(/\\n/g, '<br />');\n\n          // Compare curated content with curated twin.\n          var twinContent = $twin.html().replace(/<br>/ig,'<br />');\n\n          if(textareaContent+'&nbsp;' != twinContent){\n\n            // Add an extra white space so new rows are added when you are at the end of a row.\n            $twin.html(textareaContent+'&nbsp;');\n\n            // Change textarea height if twin plus the height of one line differs more than 3 pixel from textarea height\n            if(Math.abs($twin.height() + lineHeight - $textarea.height()) > 3){\n\n              var goalheight = $twin.height()+lineHeight;\n              if(goalheight >= maxheight) {\n                setHeightAndOverflow(maxheight,'auto');\n              } else if(goalheight <= minheight) {\n                setHeightAndOverflow(minheight,'hidden');\n              } else {\n                setHeightAndOverflow(goalheight,'hidden');\n              }\n\n            }\n\n          }\n\n        }\n\n        // Hide scrollbars\n        $textarea.css({'overflow':'hidden'});\n\n        // Update textarea size on keyup, change, cut and paste\n        $textarea.bind('keyup change cut paste', function(){\n          update();\n        });\n\n        // Compact textarea on blur\n        // Lets animate this....\n        $textarea.bind('blur',function(){\n          if($twin.height() < maxheight){\n            if($twin.height() > minheight) {\n              $textarea.height($twin.height());\n            } else {\n              $textarea.height(minheight);\n            }\n          }\n        });\n\n        // And this line is to catch the browser paste event\n        $textarea.live('input paste',function(e){ setTimeout( update, 250); });\n\n        // Run update once when elastic is initialized\n        update();\n\n      });\n\n        }\n    });\n})(jQuery);\n"]}